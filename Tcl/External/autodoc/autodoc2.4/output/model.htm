<html>
<head>
<title>General model</title>
<link rel=stylesheet href="styles.css"
 type="text/css">
</head>
<body >
<h1>General model</h1><hr class="navbar"><p class="navbar"><a href="index.htm" class="navbar">Home</a> | <a href="packages.html" class="index-package">Packages</a> | <a href="files.html" class="index-file">Files</a> | <a href="procs.html" class="index-procedure">Procedures</a> | <a href="classes.html" class="index-class">Classes</a> | <a href="namespaces.html" class="index-namespace">Namespaces</a> | <a href="keywords.html" class="index-keyword">Keywords</a> | <a href="deps.html" class="index-dependency">External packages</a> </p><hr class="navbar">
<p>
AutoDoc's view of the world is very simple. It is given a single directory,
which serves as starting point for the distribution to be scanned. A
<a href="cdistribution.html" class="class">distribution</a> is seen as collection of packages, these then contain
the tcl code to be analysed. In case of no packages found the engine assumes
that the whole distribution is a single unnamed package. Why is this important,
some might ask. Well, the engine will search only the directories  containing
packages for files containing tcl code. Everything else is left out. Except if
there are no explicit packages. The assumption told of before then causes
search of the entire tree.
</p><p>
Packages are detected by the presence of a file named <b>pkg.doc</b> in a
directory. It is sourced, the description contained will be integrated into
the HTML pages later. See <b>lib/pkg.doc</b> of this distribution for an
example.
</p><p>
The engine assumes that all files with extensions '.tcl' or '.cls' contain tcl
code to be analysed, but no more. '.cls'-files are the ones I use to store
class definitions based on the OO framework of <a href="http://www.oche.de/~akupries/soft/pool/index.htm" class="xref-dep">Pool</a>. They get separate
files as I use a tcl-based compiler to convert such definitions into pure tcl
code, the resulting files get the usual extension, aka '.tcl'. Another
behaviour caused by this: If two files <b>X.cls</b> and <b>X.tcl</b> are
found the latter one will be skipped, assuming that it was/will be generated
out of the former. Package indices (<b>pkgIndex.tcl</b>) are recognized and
will be skipped too.
</p><p>
Some more files are recognized, but I delay explanation of purpose and usage
until we talk about <a href="morepag.htm">integration</a> of manually (or
semi-automatically) written html pages.
</p><p>
Back to the files with tcl code. Their documentation is searched in the
top/first chunk of comments only. The first non-comment line will stop the
search. The same holds for class definitions, only the chunk of comments at the
very beginning is searched. On the other hand the whole body of a procedure is
searched for embedded documentation commands.
</p><p>
The engine recognizes 'package require' commands and uses them to track
dependencies on external packages. For every detected package X an external
reference extpkg_X is searched for (See <a href="morepag.htm">integration</a> for more
information about such). If present, the reference is used to insert an
appropriate hyperlink into the generated pages. Without such a reference plain
text is used to display the dependency. To help the user in providing this
references all dependencies without such are logged with a warning.
</p><p>As for the output, it is generally structured like</p><p align=center><span class="-desc-error"><a name="xr474"></a>Missing image org_overview</span></p><p><a href="cmd.htm">Next</a></p><hr><p class="generated-by">Generated by <a href="http://www.purl.org/NET/akupries/soft/autodoc/index.htm" class="generated-by">AutoDoc 2.4</a> at 01/22/2001, invoked by <a href="mailto:nwilson@nateland" class="generated-by">Unknown</a></p></body>
</html>
